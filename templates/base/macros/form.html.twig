{# DO NOT EDIT THIS FILE #}

{#
The MIT License (MIT)

Copyright (c) 2015-2019 Jacques ArchimÃ¨de

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
#}

{% macro draw(context, fieldsetContainerClass, fieldContainerClass, fieldLabelClass, fieldGroupClass, fieldClass, chapterContainerClass, chapterHeadingClass, chapterContentClass) %}
{% import _self as form %}
{{ form.row(context, fieldsetContainerClass, fieldContainerClass, fieldLabelClass, fieldGroupClass, fieldClass, chapterContainerClass, chapterHeadingClass, chapterContentClass) }}
{% endmacro %}

{% macro row(context, fieldsetContainerClass, fieldContainerClass, fieldLabelClass, fieldGroupClass, fieldClass, chapterContainerClass, chapterHeadingClass, chapterContentClass) %}

{% import _self as form %}
{% import "base/macros/form-grid.html.twig" as grid %}
{% import "base/macros/form-classic.html.twig" as classic %}
{% import "base/macros/form-inline.html.twig" as inline %}
{% import "base/macros/form-blockinfo.html.twig" as blockinfo %}

{% set step = context.step %}
{% set simu = step.simulator %}
{% set panels = 0 %}
{% set blocks = 0 %}
{% set fieldsets = 0 %}

{{ form.actions(context, 'button', 'left') }}
{{ form.actions(context, 'link', 'left') }}

{{ form.actions(context, 'button', 'top') }}
{{ form.actions(context, 'link', 'top') }}

{%- for panel in step.panels -%}
		{%- if panel.displayable or (step.dynamic and context.script == 1) or (simu.dynamic and step.id == 0) -%}
			{% set panels = panels + 1 %}
		{% endif %}	
		{%- for blck in panel.fieldSets -%}
		{%- if blck.displayable or (step.dynamic and context.script == 1) or (simu.dynamic and step.id == 0) -%}
			{% set blocks = blocks + 1 %}
			{%- if blck.class == 'FieldSet' -%}
				{% set fieldsets = fieldsets + 1 %}
			{% endif %}	
		{% endif %}
	{% endfor %}
{% endfor %}
{%- if panels > 1 %}
<ul class="nav nav-tabs">
{%- for panel in step.panels -%}
	<li{%- if loop.index == 1 %} class="active"{%- endif -%}>
		<a aria-expanded="{%- if loop.index == 1 -%}true{%- else -%}false{%- endif -%}" id="ui-tab-panel-{{ panel.id}}" role="button" data-toggle="tab" href="#{{ step.name }}-panel-{{ panel.id }}">{{ panel.label|nofnref }}{%- if loop.index == 1 %}<span class="sr-only"> (actif)</span>{% endif -%}</a>
	</li>
{% endfor %}
</ul>
<div class="tab-content">
{% endif %}

{%- for panel in step.panels -%}
	{%- if panels > 1 %}
	<div id="{{ step.name }}-panel-{{ panel.id }}" class="step-panel-container tab-pane{%- if loop.index == 1 %} active{%- endif -%}">
		<h2 tabindex="-1" class="sr-only">{{ panel.label|fnref }}</h2>
	{% else %}
	<div id="{{ step.name }}-panel-{{ panel.id }}" class="step-panel-container">
	{% endif %}
	{% set display = '' %}
	{% set grouped = false %}
	{% set groupId = 0 %}
	{%- for blck in panel.fieldSets -%}
		{%- if blck.displayable or (step.dynamic and context.script == 1) or (simu.dynamic and step.id == 0) -%}
			{%- if blck.display != display -%}
				{%- if grouped == true -%}
				</div>
				{% set grouped = false %}
				{% endif %}
				{% set display = blck.display %}
				{%- if blck.display != 'inline' -%}
				{% set groupId = groupId + 1 %}
				<div class="panel-group {{ blck.display }}" id="{{ step.name }}-panel-{{ panel.id }}-{{ blck.display }}-{{ groupId }}" role="tablist" aria-multiselectable="true">
				{% set grouped = true %}
				{% endif %}
			{% endif %}
			{%- if blck.class == 'FieldSet' -%}
				{% set fieldset = blck %}
				{% set disposition = 'classic' %}
				{%- if fieldset.disposition is not empty -%}
				{% set disposition = fieldset.disposition %}
				{%- if fieldset.disposition == 'inline' -%}
				{% set fieldsetContainerClass = '' %}
				{% endif %}
				{% endif %}
				<{%- if fieldsets > 1 and fieldset.hasInputFields -%}fieldset class="{%- if fieldset.display == 'accordion' -%}panel panel-default accordion-section {% endif -%}fieldset-container disposition-{{ disposition }} {{ fieldsetContainerClass }}"{% else %}div class="{%- if fieldset.display == 'accordion' -%}panel panel-default accordion-section {% endif -%}fieldset disposition-{{ disposition }} {{ fieldsetContainerClass }}"{% endif %} id="{{ step.name }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}">
				{%- if fieldset.display == 'pop-in' -%}
				{{ form.popinheader(context, fieldset, fieldset.legend) }}
				{%- endif -%}
				{%- if fieldset.display == 'accordion' -%}
				{{ form.accordionheader(context, step.name ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id, fieldset.legend.content, step.name ~ '-panel-' ~ panel.id ~ '-accordion-' ~ groupId) }}
				{%- else -%}
				{%- if fieldsets > 1  and fieldset.hasInputFields %}
					{%- if fieldset.legend is not empty and fieldset.legend.content is not empty -%}<legend>{{ fieldset.legend|fnref }}</legend>{%- endif -%}
				{%- else -%}
					{%- if fieldset.legend is not empty and fieldset.legend.content is not empty -%}{{ form.heading(fieldset.legend, 3, "legend") }}{%- endif -%}
				{%- endif -%}
				{%- endif -%}
				{%- if disposition == "grid" -%}
				{{ grid.row(context, fieldset, fieldsetContainerClass, fieldContainerClass, fieldGroupClass, fieldClass) }}
				{%- elseif disposition == "inline" -%}
				{{ inline.row(context, fieldset) }}
				{% else %}
				{{ classic.row(context, fieldset, fieldContainerClass, fieldLabelClass, fieldGroupClass, fieldClass) }}
				{% endif %}
				{%- if fieldset.display == 'pop-in' -%}
				{{ form.popinfooter(context) }}
				{%- endif -%}
				{%- if fieldset.display == 'accordion' -%}
				{{ form.accordionfooter(context) }}
				{%- endif -%}
				</{%- if fieldsets > 1 and fieldset.hasInputFields -%}fieldset{% else %}div{% endif %}>
			{%- elseif blck.class == 'BlockInfo' -%}
				<div id="{{ step.name }}-panel-{{ panel.id }}-blockinfo-{{ blck.id }}" class="{%- if blck.display == 'accordion' -%}panel panel-default accordion-section {% endif -%}blockinfo-container">
				{%- if blck.display == 'pop-in' -%}
				{{ form.popinheader(context, blck, blck.label) }}
				{%- endif -%}
				{%- if blck.display == 'accordion' -%}
				{{ form.accordionheader(context, step.name ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blck.id, blck.label, step.name ~ '-panel-' ~ panel.id ~ '-accordion-' ~ groupId) }}
				{%- endif -%}
				{{ blockinfo.row(context, blck, chapterContainerClass, chapterHeadingClass, chapterContentClass) }}
				{%- if blck.display == 'pop-in' -%}
				{{ form.popinfooter(context) }}
				{%- endif -%}
				{%- if blck.display == 'accordion' -%}
				{{ form.accordionfooter(context) }}
				{%- endif -%}
				</div>
			{%- endif -%}
		{%- endif -%}
	{% endfor %} {# end for blck in panel.fieldSets #}
	{%- if grouped == true -%}
		</div>
	{% endif %}
	</div>
{% endfor %} {# end for panel in step.fieldSets #}
{% if panels > 1 %}
</div>
{% endif %}
{%- if simu.error or simu.warning or (step.dynamic and context.script == 1) or (simu.dynamic and step.id == 0) -%}
<div id="global-error" class="{%- if simu.error %} has-error{%- elseif simu.warning %} has-warning{%- else %} hidden{%- endif -%}" aria-live="assertive">
{%- if simu.error -%}
{%- for errorMessage in simu.errorMessages -%}<p>{{ errorMessage }}</p>{%- endfor -%}
{% endif %}
{%- if simu.warning -%}
{%- for warningMessage in simu.warningMessages -%}<p>{{ warningMessage }}</p>{%- endfor -%}
{% endif %}
</div>
{% endif %}
{%- if step.footNotes and step.footNotes.position == "beforeActions" %}
{{ form.footnotes(context) }}
{% endif %}

{{ form.actions(context, 'button', 'right') }}
{{ form.actions(context, 'link', 'right') }}

{{ form.actions(context, 'button', 'bottom') }}
{{ form.actions(context, 'link', 'bottom') }}

{%- if step.footNotes and step.footNotes.position == "afterActions" %}
{{ form.footnotes(context) }}
{% endif %}

{{ form.hiddens(context) }}

{% endmacro %}

{% macro popinheader(context, block, label) %}
<a data-toggle="modal" data-target="#popin-{{ context.step.id ~ '-' ~ block.id }}">{{ block.popinLink }}</a>
<div class="modal fade" id="popin-{{ context.step.id ~ '-' ~ block.id }}" tabindex="-1" role="dialog" aria-labelledby="popin-{{ context.step.id ~ '-' ~ block.id }}-label">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fermer"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="popin-{{ context.step.id ~ '-' ~ block.id }}-label">{{ label|fnref }}</h4>
			</div>
			<div class="modal-body">
{% endmacro %}

{% macro popinfooter(context) %}
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Fermer</button>
			</div>
		</div>
	</div>
</div>
{% endmacro %}

{% macro accordionheader(context, id, label, accordionId) %}
<div class="panel-heading" role="tab" id="{{ id ~ '-heading' }}">
	<h4 class="panel-title">
		<a role="button" data-toggle="collapse" data-parent="{{ '#' ~ accordionId }}" href="{{ '#' ~ id ~ '-collapse' }}" aria-expanded="false" aria-controls="{{ id ~ '-collapse' }}">
			{{ label }}
		</a>
	</h4>
</div>
<div id="{{ id ~ '-collapse' }}" class="panel-collapse collapse" role="tabpanel" aria-labelledby="{{ id ~ '-heading' }}">
	<div class="panel-body">
{% endmacro %}

{% macro accordionfooter(context) %}
	</div>
</div>
{% endmacro %}

{% macro actions(context, shape, location) %}
{% set step = context.step %}
{% set simu = step.simulator %}
{% set actionsOfShapeAt = step.actionsOfShapeAt(shape, location) %}
{% if actionsOfShapeAt|length > 0 %}
<div class="action_buttons {{ shape }} {{ location }}">
{%- for action in actionsOfShapeAt -%}
	{% if shape == 'button' %}
	{% set buttontype = action.what == 'execute' ? 'button' : action.what %}
	<button class="btn {{ action.class }}" type="{{ buttontype }}" name="{{ action.name }}"{% if action.for == 'externalPage' %} formaction="{{ action.uri }}"{% endif %}{% if action.for == 'function' %} data-function="{{ action.uri }}"{% endif %}>{% if action.for == 'priorStep' %}<span class="fas fa-chevron-left"> </span>{% endif %}{{ action.label|nofnref }}{%if action.for == 'nextStep' %}<span class="fas fa-chevron-right"> </span>{% endif %}</button>
	{% else %}
	<a class="btn" name="{{ action.name }}"{% if action.for == 'externalPage' %} formaction="{{ action.uri }}"{% endif %}{% if action.for == 'function' %} data-function="{{ action.uri }}"{% endif %}>{% if action.for == 'priorStep' %}<span class="fas fa-chevron-left"> </span>{% endif %}{{ action.label|nofnref }}{%if action.for == 'nextStep' %}<span class="fas fa-chevron-right"> </span>{% endif %}</a>
	{% endif %}
{% endfor %}
</div>
{% endif %}
{% endmacro %}

{% macro footnotes(context) %}
{% import _self as form %}
{% set step = context.step %}
{%- if step.footNotes and (step.footNotes.displayable or (step.dynamic and context.script == 1) or (step.simulator.dynamic and step.id == 0)) %}
{% set footnotes = step.footNotes %}
<div class="foot-notes">
{%- for footnote in footnotes.footNotes -%}
	{%- if footnote.displayable or (step.simulator.dynamic and step.id == 0) or (step.dynamic and context.script == 1) -%}
	<div id="foot-note-{{ footnote.id }}" class="foot-note">
	{{ form.paragraphs(footnote.text) }}
	</div>
	{% endif %}
{% endfor %}
</div>
{% endif %}
{% endmacro %}

{% macro hiddens(context) %}
{% set step = context.step %}
{% set extras = context.hiddens %}
{% set simu = step.simulator %}
{%- for data in simu.datas -%}
	{%- if data.class == "DataGroup" -%}
	{%- for gdata in data.datas -%}
	{%- if not gdata.used -%}
		<input type="hidden" name="{{ gdata.name }}" value="{{ gdata.plainValue }}"{%- if gdata.inputStepId == 0 or gdata.inputStepId > step.id %} class="resettable"{%- endif -%} />
	{% endif %}
	{% endfor %}
	{%- elseif not data.used -%}
		<input type="hidden" name="{{ data.name }}" value="{{ data.plainValue }}"{%- if data.inputStepId == 0 or data.inputStepId > step.id %} class="resettable"{%- endif -%} />
	{% endif %}
{% endfor %}
{%- for name, value in extras -%}
	<input type="hidden" name="{{ name }}" value="{{ value }}" />
{% endfor %}
<input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}" />
{% endmacro %}

{% macro monthname(m) %}
{% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
{% if m > 0 %}{{ months[m - 1] }}{% endif %}
{% endmacro %}

{% macro departments(value, prompt) %}
{% set deps = {'01': 'Ain', '02': 'Aisne', '03': 'Allier', '04': 'Alpes-de-Haute-Provence', '05': 'Hautes-Alpes', '06': 'Alpes-Maritimes', '07': 'ArdÃ¨che', '08': 'Ardennes', '09': 'AriÃ¨ge', '10': 'Aube', '11': 'Aude', '12': 'Aveyron', '13': 'Bouches-du-RhÃ´ne', '14': 'Calvados', '15': 'Cantal', '16': 'Charente', '17': 'Charente-Maritime', '18': 'Cher', '19': 'CorrÃ¨ze', '21': 'CÃ´te-d\'Or', '22': 'CÃ´tes-d\'Armor', '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'DrÃ´me', '27': 'Eure', '28': 'Eure-et-Loir', '29': 'FinistÃ¨re', '2A': 'Corse-du-Sud', '2B': 'Haute-Corse', '30': 'Gard', '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde', '34': 'HÃ©rault', '35': 'Ille-et-Vilaine', '36': 'Indre', '37': 'Indre-et-Loire', '38': 'IsÃ¨re', '39': 'Jura', '40': 'Landes', '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire', '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot', '47': 'Lot-et-Garonne', '48': 'LozÃ¨re', '49': 'Maine-et-Loire', '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne', '53': 'Mayenne', '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan', '57': 'Moselle', '58': 'NiÃ¨vre', '59': 'Nord', '60': 'Oise', '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-DÃ´me', '64': 'PyrÃ©nÃ©es-Atlantiques', '65': 'Hautes-PyrÃ©nÃ©es', '66': 'PyrÃ©nÃ©es-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin', '69': 'RhÃ´ne', '70': 'Haute-SaÃ´ne', '71': 'SaÃ´ne-et-Loire', '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie', '75': 'Paris', '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines', '79': 'Deux-SÃ¨vres', '80': 'Somme', '81': 'Tarn', '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse', '85': 'VendÃ©e', '86': 'Vienne', '87': 'Haute-Vienne', '88': 'Vosges', '89': 'Yonne', '90': 'Territoire de Belfort', '91': 'Essonne', '92': 'Hauts-de-Seine', '93': 'Seine-Saint-Denis', '94': 'Val-de-Marne', '95': 'Val-d\'Oise', '971': 'Guadeloupe', '972': 'Martinique', '973': 'Guyane', '974': 'La RÃ©union', '976': 'Mayotte'} %}
<option value=""{%- if value == "" %} selected="selected"{% endif %}>{{ prompt }}</option>
{%- for nodep, dep in deps -%}
<option value="{{ nodep }}"{%- if nodep == value %} selected="selected"{% endif %}>{{ nodep }} - {{ dep }}</option>
{% endfor %}
{% endmacro %}

{% macro departmentname(nodep) %}
{% set deps = {'01': 'Ain', '02': 'Aisne', '03': 'Allier', '04': 'Alpes-de-Haute-Provence', '05': 'Hautes-Alpes', '06': 'Alpes-Maritimes', '07': 'ArdÃ¨che', '08': 'Ardennes', '09': 'AriÃ¨ge', '10': 'Aube', '11': 'Aude', '12': 'Aveyron', '13': 'Bouches-du-RhÃ´ne', '14': 'Calvados', '15': 'Cantal', '16': 'Charente', '17': 'Charente-Maritime', '18': 'Cher', '19': 'CorrÃ¨ze', '21': 'CÃ´te-d\'Or', '22': 'CÃ´tes-d\'Armor', '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'DrÃ´me', '27': 'Eure', '28': 'Eure-et-Loir', '29': 'FinistÃ¨re', '2A': 'Corse-du-Sud', '2B': 'Haute-Corse', '30': 'Gard', '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde', '34': 'HÃ©rault', '35': 'Ille-et-Vilaine', '36': 'Indre', '37': 'Indre-et-Loire', '38': 'IsÃ¨re', '39': 'Jura', '40': 'Landes', '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire', '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot', '47': 'Lot-et-Garonne', '48': 'LozÃ¨re', '49': 'Maine-et-Loire', '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne', '53': 'Mayenne', '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan', '57': 'Moselle', '58': 'NiÃ¨vre', '59': 'Nord', '60': 'Oise', '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-DÃ´me', '64': 'PyrÃ©nÃ©es-Atlantiques', '65': 'Hautes-PyrÃ©nÃ©es', '66': 'PyrÃ©nÃ©es-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin', '69': 'RhÃ´ne', '70': 'Haute-SaÃ´ne', '71': 'SaÃ´ne-et-Loire', '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie', '75': 'Paris', '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines', '79': 'Deux-SÃ¨vres', '80': 'Somme', '81': 'Tarn', '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse', '85': 'VendÃ©e', '86': 'Vienne', '87': 'Haute-Vienne', '88': 'Vosges', '89': 'Yonne', '90': 'Territoire de Belfort', '91': 'Essonne', '92': 'Hauts-de-Seine', '93': 'Seine-Saint-Denis', '94': 'Val-de-Marne', '95': 'Val-d\'Oise', '971': 'Guadeloupe', '972': 'Martinique', '973': 'Guyane', '974': 'La RÃ©union', '976': 'Mayotte'} %}
{{ deps[nodep] }}
{% endmacro %}

{% macro profiles(context) %}
{% set step = context.step %}
{% if step.simulator.profiles is not empty and (step.id == 0 or step.id == 1) %}
<div class="simulator-profiles">
	<p>{{ step.simulator.profiles.label|fnref }}</p>
	<ul class="nav nav-pills">
		{% for p in step.simulator.profiles.profiles %}
		<li tabindex="0" data-profile-id="{{ p.id }}">{{ p.label|fnref }}</li>
		{% endfor %}
	</ul>
</div>
{% endif %}
{% endmacro %}

{% macro breadcrumb(context) %}
{% set step = context.step %}
{% if step.id > 0 %}
{% set simu = step.simulator %}
{% set steps = 0 %}
{%- for s in simu.steps -%}
	{% if s.id > 0 and s.displayable and (s.output is empty or s.output == 'normal') %}
		{% set steps = steps + 1 %}
	{% endif %}
{% endfor %}
{% set stepnum = 0 %}
<div class="simulator-breadcrumb">
<h2 class="sr-only">{{ 'Steps of your simulation'|trans }}</h2>
<ol class="simulator-breadcrumb-{{ steps }} simulator-breadcrumb-{{ steps }}-{{ step.id }}">
{%- for s in simu.steps -%}
	{% if s.id > 0 and s.displayable and (s.output is empty or s.output == 'normal') %} 
		{% set stepnum = stepnum + 1 %}
		{% if s.id == step.id %}
		<li class="current" title="{{ 'Current step'|trans }} : {{ s.label|fnref }}"><p><span class="sr-only">{{ 'Current step'|trans }}</span><strong><span>{{ stepnum }}</span> <span>{{ s.label|fnref }}</span></strong></p></li>
		{% else %}
		<li aria-hidden="true"><p><span>{{ stepnum }}</span> <span>{{ s.label|fnref }}</span></p></li>
		{% endif %}
	{% endif %}
{% endfor %}
</ol>
</div>
{% endif %}
{% endmacro %}

{% macro requiredmention(context) %}
{% set step = context.step %}
{% if step.hasRequiredFields %}
<p class="mention-asterisk">{{ 'Fields marked with an %asterisk% are required.'|trans({ '%asterisk%': '<span class="asterisk">*</span>' })|nofilter }}</p>
{% endif %}
{% endmacro %}

{% macro paragraphs(text) %}
	{{ text|htmlraw }}
{% endmacro %}

{% macro textoutput(text) %}
{%- if text matches '/^https?\\:\\/\\//' -%}
	{%- if text matches '/(jpg|jpeg|gif|png)$/i' -%}
	<img src="{{ text }}" alt="{{ text }}">
	{%- else -%}
	<a href="{{ text }}">{{ text }}</a>
	{%- endif -%}
{%- elseif text matches '/^data\\:image\\//' -%}
	<img src="{{ text }}" alt="*">
{%- else -%}
{{ text }}
{%- endif -%}
{% endmacro %}

{% macro heading(text, level, class) %}
	{% if text.content is defined %}
		{% set text = text.content %}
	{% endif %}
	{%- if text is not empty -%}<h{{ level }} class="{{ class }}">{{ text|trim|replace({"\n": "<br>"})|jscode }}</h{{ level }}>{%- endif -%}
{% endmacro %}

{% macro asset(c, resource) %}{% set pathlength = c.pathlength %}{% set updir = 'src/EUREKA/G6KBundle/Resources/public/' ~ resource %}{%- if pathlength > 0 %}{% for i in 1..pathlength %}{% set updir = '../' ~ updir %}{% endfor %}{% endif %}{{ updir }}{% endmacro %}
