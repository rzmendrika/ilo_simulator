<?php

namespace App\G6K\Services;

use Symfony\Component\Asset\VersionStrategy\VersionStrategyInterface;

class VersionStrategy implements VersionStrategyInterface
{
	/**
	 * @var string   The path of manifest.json file generated by the 'g6k:assets:manifest:update' console command 
	 */
	private $manifestPath;

	/**
	 * @var string   The format of the returned url of the asset
	 */
	private $format;

	/**
	 * @var string[]  The hashes from the manifest.json file
	 */
	private $hashes;

	/**
	 * @param  string      $manifestPath The path of manifest.json file generated by the 'g6k:assets:manifest:update' console command 
	 * @param  string|null $format       The format of the returned url of the asset
	 * @return void
	 */
	public function __construct(string $manifestPath, string $format = null) {
		$this->manifestPath = $manifestPath;
		$this->format = $format ?: '%s?%s';
	}

	/**
	 * Returns the md5 hash of the asset as version
	 *
	 * @param string      $path The path of the asset
	 * @return string     The md5 hash of the asset
	 */
	public function getVersion($path) {
		if (!is_array($this->hashes)) {
			$this->hashes = $this->loadManifest();
			
		}
		return isset($this->hashes[$path]) ? $this->hashes[$path]['v'] : '';
	}

	/**
	 * Applies the version strategy on the given path
	 *
	 * @param string   $path The path of the asset
	 * @return string        The versionized path   
	 */
	public function applyVersion($path) {
		$version = $this->getVersion($path);
		if ('' === $version) {
			return $path;
		}
		$versionized = sprintf($this->format, ltrim($path, '/'), $version);
		if ($path && '/' === $path[0]) {
			return '/'.$versionized;
		}
		return $versionized;
	}

	/**
	 * Loads the manifest.json file
	 *
	 * return mixed
	 */
	private function loadManifest() {
		return json_decode(file_get_contents($this->manifestPath), true);
	}

}
